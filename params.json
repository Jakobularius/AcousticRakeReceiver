{"name":"Raking the Cocktail Party","tagline":"The acoustic rake receiver, a microphone beamformer that uses echoes to improve the noise and interference suppression. Python code to reproduce all the results from the paper Raking the Cocktail Party by Ivan Dokmanić, Robin Scheibler, and Martin Vetterli.","body":"Raking the Cocktail Party\r\n=========================\r\n\r\nThis repository contains all the code to reproduce the results of the paper\r\n[*Raking the Cocktail Party*](http://infoscience.epfl.ch/record/200336).\r\n\r\nWe created a simple framework for simulation of room acoustics in object\r\noriented python and apply it to perform numerical experiments related to\r\nthis paper. All the figures and sound samples can be recreated by calling\r\nsimple scripts leveraging this framework. We strongly hope that this code\r\nwill be useful beyond the scope of this paper and plan to develop it into\r\na standalone python package in the future.\r\n\r\nWe are available for any question or request relating to either the code\r\nor the theory behind it. Just ask!\r\n\r\nAbstract\r\n--------\r\n\r\nWe present the concept of an acoustic rake receiver (ARR) — a microphone\r\nbeamformer that uses echoes to improve the noise and interference suppression.\r\nThe rake idea is well-known in wireless communications. It involves\r\nconstructively combining different multipath components that arrive at the\r\nreceiver antennas. Unlike typical spread-spectrum signals used in wireless\r\ncommunications, speech signals are not orthogonal to their shifts, which makes\r\nacoustic raking a more challenging problem. That is why the correct way to\r\nthink about it is spatial. Instead of explicitly estimating the channel, we\r\ncreate correspondences between early echoes in time and image sources in space.\r\nThese multiple sources of the desired and interfering signals offer additional\r\nspatial diversity that we can exploit in the beamformer design.\r\n\r\nWe present several \"intuitive\" and optimal formulations of ARRs, and show\r\ntheoretically and numerically that the rake formulation of the maximum\r\nsignal-to-interference-and-noise beamformer offers significant performance\r\nboosts in terms of noise suppression and interference cancellation. We\r\naccompany the paper by the complete simulation and processing chain written in\r\nPython.\r\n\r\n\r\nAuthors\r\n-------\r\n\r\nIvan Dokmanić, Robin Scheibler, and Martin Vetterli are with \r\nLaboratory for Audiovisual Communications ([LCAV](http://lcav.epfl.ch)) at \r\n[EPFL](http://www.epfl.ch).\r\n\r\n<img src=\"http://lcav.epfl.ch/files/content/sites/lcav/files/images/Home/LCAV_anim_200.gif\">\r\n\r\n#### Contact\r\n\r\n[Ivan Dokmanić](mailto:ivan[dot]dokmanic[at]epfl[dot]ch) <br>\r\nEPFL-IC-LCAV <br>\r\nBC Building <br>\r\nStation 14 <br>\r\n1015 Lausanne\r\n\r\n\r\nSelected results from the paper\r\n-------------------------------\r\n\r\n### Spectrograms and Sound Samples\r\n\r\n<img src=\"https://raw.githubusercontent.com/LCAV/AcousticRakeReceiver/master/figures/spectrograms.png\" width=800>\r\n\r\nComparison of the conventional Max-SINR and Rake-Max-SINR beamformer on a real\r\nspeech sample.  Spectrograms of (A) clean signal of interest, (B) signal\r\ncorrupted by an interferer and additive white Gaussian noise at the microphone\r\ninput, outputs of (C) conventional Max-SINR and (D) Rake-Max- SINR beamformers.\r\nTime naturally goes from left to right, and frequency increases from zero at\r\nthe bottom up to Fs/2. To highlight the improvement of Rake-Max-SINR over\r\nMax-SINR, we blow-up three parts of the spectrograms in the lower part of the\r\nfigure. The boxes and the corresponding part of the original spectrogram are\r\nnumbered in (A). The numbering is the same but omitted in the rest of the\r\nfigure for clarity.\r\n\r\nThe corresponding sound samples:\r\n\r\n* [A](https://github.com/LCAV/AcousticRakeReceiver/raw/master/samples/singing_8000.wav) Desired signal.\r\n* [B](https://github.com/LCAV/AcousticRakeReceiver/raw/master/output_samples/input_mic.wav) Simulated microphone input signal.\r\n* [C](https://github.com/LCAV/AcousticRakeReceiver/raw/master/output_samples/output_maxsinr.wav) Output of conventional Max-SINR beamformer.\r\n* [D](https://github.com/LCAV/AcousticRakeReceiver/raw/master/output_samples/output_rake-maxsinr.wav) Output of proposed  Rake-Max-SINR beamformer.\r\n\r\n### Beam Patterns\r\n\r\n<img src=\"https://raw.githubusercontent.com/LCAV/AcousticRakeReceiver/master/figures/beam_scenarios.png\" width=800>\r\n\r\nBeam patterns in different scenarios. The rectangular room is 4 by 6 metres and\r\ncontains a source of interest (•) and an interferer (✭) ((B), (C), (D) only).\r\nThe first order image sources are also displayed. The weight computation of the\r\nbeamformer includes the direct source and the first order image sources of both\r\ndesired source and interferer (when applicable). (A) Rake-Max-SINR, no\r\ninterferer, (B) Rake-Max-SINR, one interferer, (C) Rake-Max-UDR, one\r\ninterferer, (D) Rake-Max-SINR, interferer is in direct path.\r\n\r\nDependencies\r\n------------\r\n\r\n* A working distribution of [Python 2.7](https://www.python.org/downloads/).\r\n* The code relies heavily on [Numpy](http://www.numpy.org/), [Scipy](http://www.scipy.org/), and [matplotlib](http://matplotlib.org).\r\n* We use the distribution [anaconda](https://store.continuum.io/cshop/anaconda/) to simplify the setup of the environment.\r\n\r\n### PESQ Tool\r\n\r\nDownload the [source files](http://www.itu.int/rec/T-REC-P.862-200511-I!Amd2/en) of the ITU P.862\r\ncompliance tool from the ITU website.\r\n\r\n#### Unix compilation (Linux/Mac OS X)\r\n\r\nExecute the following sequence of commands to get to the source code.\r\n\r\n    mkdir PESQ\r\n    cd PESQ\r\n    wget 'https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-P.862-200511-I!Amd2!SOFT-ZST-E&type=items'\r\n    unzip dologin_pub.asp\\?lang\\=e\\&id\\=T-REC-P.862-200511-I\\!Amd2\\!SOFT-ZST-E\\&type\\=items\r\n    cd Software\r\n    unzip 'P862_annex_A_2005_CD  wav final.zip'\r\n    cd P862_annex_A_2005_CD/source/\r\n\r\nIn the `Software/P862_annex_A_2005_CD/source/` directory, create a file called `Makefile` and copy\r\nthe following into it.\r\n\r\n    CC=gcc\r\n    CFLAGS=-O2\r\n\r\n    OBJS=dsp.o pesqdsp.o pesqio.o pesqmod.o pesqmain.o\r\n    DEPS=dsp.h pesq.h pesqpar.h\r\n\r\n    %.o: %.c $(DEPS)\r\n      $(CC) -c -o $@ $< $(CFLAGS)\r\n\r\n    pesq: $(OBJS)\r\n      $(CC) -o $@ $^ $(CFLAGS)\r\n\r\n    .PHONY : clean\r\n    clean :\r\n      -rm pesq $(OBJS)\r\n\r\nExecute compilation by typing this.\r\n\r\n    make pesq\r\n\r\nFinally move the `pesq` binary to `<repo_root>/bin/`.\r\n\r\nNotes:\r\n* The files input to the pesq utility must be 16 bit PCM wav files.\r\n* File names longer than 14 characters (suffix included) cause the utility to\r\n  crash with the message `Abort trap(6)` or similar.\r\n\r\n#### Windows compilation\r\n\r\n1. Open visual studio, create a new project from existing files and select the directory\r\n  containing the source code of PESQ (`Software\\P862_annex_A_2005_CD\\source\\`).\r\n\r\n          FILE -> New -> Project From Existing Code...\r\n\r\n2. Select `Visual C++` from the dropdown menu, then next.\r\n    * *Project file location* : directory containing source code of pesq (`Software\\P862_annex_A_2005_CD\\source\\`).\r\n    * *Project Name* : pesq\r\n    * Then next.\r\n    * As *project type*, select `Console application` project.\r\n    * Then finish.\r\n\r\n3. Go to\r\n\r\n          BUILD -> Configuration Manager...\r\n\r\n    and change active solution configuration from `Debug` to `Release`. Then Close.\r\n\r\n4. Then \r\n\r\n          BUILD -> Build Solution\r\n\r\n5. Copy the executable `Release\\pesq.exe` to the bin folder.\r\n\r\n*(tested with Microsoft Windows Server 2012)*\r\n\r\nRecreate the figures and sound samples\r\n--------------------------------------\r\n\r\nIn a UNIX terminal, run the following script.\r\n\r\n    ./make_all_figures.sh\r\n\r\nAlternatively, type in the following commands in an ipython shell.\r\n\r\n    run figure_spectrograms.py\r\n    run figure_beam_scenarios.py\r\n    run figure_Measures1.py\r\n    run figure_Measures2.py\r\n    run figure_SumNorm.py\r\n    run figure_quality_sim.py -s 10000\r\n    run figure_quality_plot.py\r\n\r\nThe figures and sound samples generated are collected in `figures` and\r\n`output_samples`, respectively.\r\n\r\nThe script `figure_quality_sim.py` is very heavy computationally. Above, 10000\r\nis the number of loops. This number can be decreased when testing the code.\r\nIt is possible to run it also in parallel in the following way. Open a shell\r\nand type in the following.\r\n\r\n    ipcluster start -n <number_of_workers>\r\n    ipython figure_quality_sim.py 10000\r\n\r\nOn the first line, we start the ipython workers. Notice that we omit the `-s`\r\noption on the second line.  This will run `<number_of_workers>` parallel jobs.\r\nBe sure to *deactivate* the MKL extensions if you have them enabled to make sure\r\nyou have maximum efficiency.\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2014, Ivan Dokmanić, Robin Scheibler, Martin Vetterli\r\n\r\nThis code is free to reuse for non-commercial purpose such as academic or\r\neducational. For any other use, please contact the authors.\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">Acoustic Rake Receiver</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://lcav.epfl.ch\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Ivan Dokmanić, Robin Scheibler, Martin Vetterli</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br />Based on a work at <a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"https://github.com/LCAV/AcousticRakeReceiver\" rel=\"dct:source\">https://github.com/LCAV/AcousticRakeReceiver</a>.\r\n\r\n","google":"UA-58615911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}